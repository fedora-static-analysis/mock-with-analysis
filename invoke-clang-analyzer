#!/usr/bin/env python
#   Copyright 2013 David Malcolm <dmalcolm@redhat.com>
#   Copyright 2013 Red Hat, Inc.
#
#   This is free software: you can redistribute it and/or modify it
#   under the terms of the GNU General Public License as published by
#   the Free Software Foundation, either version 3 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful, but
#   WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
#   General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program.  If not, see
#   <http://www.gnu.org/licenses/>.

import glob
import os
from subprocess import Popen, PIPE, STDOUT
import sys
import tempfile

from fakegcc import write_analysis_as_xml, write_streams, Timer, \
    make_file, make_stats, log, get_real_executable
from firehose.parsers.clanganalyzer import parse_plist
from gccinvocation import GccInvocation

def invoke_clang_analyzer(gccinv, dstxmlpath):

    log('invoke_clang_analyzer(%s, %r)' % (gccinv, dstxmlpath))

    for sourcefile in gccinv.sources:
        if sourcefile.endswith('.c'): # FIXME: other extensions?
            t = Timer()
            resultdir = tempfile.mkdtemp()
            args = ['scan-build', '-v', '-plist',
                    '-o', resultdir,
                    get_real_executable(gccinv.argv)] + gccinv.argv[1:]
            log(args)
            p = Popen(args, stdout=PIPE, stderr=PIPE)
            out, err = p.communicate()
            write_streams('scan-build (clang_analyzer)', out, err)

            # Given e.g. resultdir='/tmp/tmpQW2l2B', the plist files
            # are an extra level deep e.g.:
            #  '/tmp/tmpQW2l2B/2013-01-22-1/report-MlwJri.plist'
            for plistpath in glob.glob(os.path.join(resultdir,
                                                    '*/*.plist')):
                analysis = parse_plist(plistpath,
                                       file_=make_file(sourcefile),
                                       stats=make_stats(t))
                write_analysis_as_xml(analysis, dstxmlpath)


if __name__ == '__main__':
    dstxmlpath =  sys.argv[1]
    gccinv = GccInvocation(sys.argv[2:])
    invoke_clang_analyzer(gccinv, dstxmlpath)
