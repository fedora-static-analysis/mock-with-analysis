#! /usr/bin/env python
#   Copyright 2012, 2013 David Malcolm <dmalcolm@redhat.com>
#   Copyright 2012, 2013 Red Hat, Inc.
#
#   This is free software: you can redistribute it and/or modify it
#   under the terms of the GNU General Public License as published by
#   the Free Software Foundation, either version 3 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful, but
#   WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
#   General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program.  If not, see
#   <http://www.gnu.org/licenses/>.

import argparse
import glob
import hashlib
import os
import re
import shutil
from subprocess import check_output, Popen, PIPE
import sys

from firehose.report import Analysis, Issue, SourceRpm, Hash, Visitor

class MockConfig:
    def __init__(self, name):
        self.name = name

    def get_result_path(self):
        return '/var/lib/mock/%s/result/' % self.name

    def get_chroot(self):
        return '/var/lib/mock/%s/root/' % self.name

    def get_path(self, internalabspath):
        assert internalabspath.startswith('/')
        return os.path.join(self.get_chroot(), internalabspath[1:])

    def dump_log(self, logfile):
        print('--------------------------------------------------------------')
        print(logfile)
        print('--------------------------------------------------------------')
        with open(os.path.join(self.get_result_path(), logfile)) as f:
            sys.stdout.write(f.read())

    def cmd(self, commands,
            captureOut=False, captureErr=False, failOnError=True):
        cmds = ['mock', '-r', self.name, '--disable-plugin=ccache'] + commands
        print('--------------------------------------------------------------')
        print(' '.join(cmds))
        print('--------------------------------------------------------------')
        args = {}
        if captureOut:
            args['stdout'] = PIPE
        if captureErr:
            args['stderr'] = PIPE
        p = Popen(cmds, **args)
        out, err = p.communicate()
        if p.returncode != 0 and failOnError:
            msg = 'mock failed: return code %i' % p.returncode
            if captureOut:
                msg += 'stdout: %s' % out
            if captureErr:
                msg += 'stderr: %s' % err
            raise RuntimeError(msg)
        return out, err

    def get_nvras(self, name):
        '''
        Get a list of the installed NAME-VERSION-RELEASE.ARCHs of the named
        package in the chroot

        (This assumes that the rpm databases are compatible between the
        chroot and the host)
        '''
        out, err = self.cmd(['--chroot', "rpm -q %s" % name],
                            captureOut=True)
        return out.splitlines()

def setup_chroot(mockcfg, srpmpath):
    # The following things take a relatively long time
    # If you're just hacking on fakegcc.py, turn this block off
    if 1:
        # Experimenting with the script is much faster if we remove
        # the --init here:
        if 1:
            mockcfg.cmd(['--init'])
        mockcfg.cmd(['--installdeps', srpmpath])

        # Install the static analyzers of interest:
        mockcfg.cmd(['--install', 'cppcheck'])
        mockcfg.cmd(['--install', 'clang-analyzer'])

        # Install the pre-built gcc-python-plugin (from the firehose branch):
        mockcfg.cmd(['--install',
                      '/home/david/rpmbuild/RPMS/x86_64/gcc-python2-plugin-0.11.firehose-1.fc17.x86_64.rpm'])

        # Copy up latest version of the libcpychecker code from a working copy
        # overriding the copy from the pre-built plugin:
        if 0:
            HACKED_PATH='/usr/lib/gcc/x86_64-redhat-linux/4.7.2/plugin/python2'
            # FIXME: ^^ this will need changing
            for module in glob.glob('../../libcpychecker/*.py'):
                mockcfg.cmd(['--copyin', module, os.path.join(HACKED_PATH, 'libcpychecker')])
                mockcfg.cmd(['--copyin', '../../gccutils.py', HACKED_PATH])

        # Stuff needed by fakegcc.py:
        # FIXME: package these and get them into Fedora:
        mockcfg.cmd(['--install', '../firehose/dist/firehose-0.0.1-1.noarch.rpm'])
        mockcfg.cmd(['--install', '../gccinvocation/dist/gccinvocation-0.0.1-1.noarch.rpm'])
        mockcfg.cmd(['--install', '/home/david/rpmbuild/RPMS/x86_64/python-subprocess32-3.2.3-1.fc17.x86_64.rpm'])
        # ^^^ review request for python-subprocess32:
        #        https://bugzilla.redhat.com/show_bug.cgi?id=910891

        # Override the real gcc/g++ with our fake ones, which add the necessary flags
        # and then invokes the real one:
        mockcfg.cmd(['--chroot', 'mv /usr/bin/gcc /usr/bin/the-real-gcc'])
        mockcfg.cmd(['--chroot', 'mv /usr/bin/g++ /usr/bin/the-real-g++'])
        mockcfg.cmd(['--chroot', 'mv /usr/bin/c++ /usr/bin/the-real-c++'])

        # Symlink /usr/bin/the-real-cc to /usr/bin/the-real-gcc
        # (since /usr/bin/cc is a symlink to /usr/bin/gcc):
        mockcfg.cmd(['--chroot', 'ln -s /usr/bin/the-real-gcc /usr/bin/the-real-cc'])
    else:
        shutil.rmtree(os.path.join(mockcfg.get_result_path(), 'static-analysis'),
                      ignore_errors=True)

    mockcfg.cmd(['--copyin', 'fakegcc.py', '/usr/bin/gcc'])
    mockcfg.cmd(['--copyin', 'fakegcc.py', '/usr/bin/g++'])
    mockcfg.cmd(['--copyin', 'fakegcc.py', '/usr/bin/c++'])
    mockcfg.cmd(['--copyin',
                 'fakegcc.py', '/usr/lib/python2.7/site-packages/fakegcc.py'])
    for script in ['invoke-cppcheck',
                   'invoke-clang-analyzer',
                   'invoke-cpychecker',
                   ]:
        mockcfg.cmd(['--copyin', script, '/usr/bin/%s' % script])

def rebuild_srpm(mockcfg, srpmpath):
    # Rebuild the src.rpm, using the hacked-up gcc:
    mockcfg.cmd(['--rebuild', srpmpath,

              '--no-clean',

              ],
             failOnError=False)

    # For convenience, dump the logs from the chroot:
    #mockcfg.dump_log('root.log')
    mockcfg.dump_log('build.log')


def extract_results_from_chroot(mockcfg, srpm, buildarch):
    # Scrape out the XML files (and sources) and postprocess them
    resultdir = mockcfg.get_result_path()
    def mkdir(path):
        if not os.path.exists(path):
            os.mkdir(path)
    dstdir = os.path.join(resultdir, 'static-analysis')
    mkdir(dstdir)
    reportsdir = os.path.join(dstdir, 'reports')
    mkdir(reportsdir)
    sourcesdir = os.path.join(dstdir, 'sources')
    mkdir(sourcesdir)

    class FixupGeneratorVersions(Visitor):
        '''
        Helper for fixing up version information within a report so that it
        reflects the underlying rpm metadata in the chroot
        '''
        def __init__(self):
            self.versions = {}
            for (generator_name, rpmname) in [('clang-analyzer', 'clang-analyzer'),
                                              ('cppcheck', 'cppcheck'),
                                              ('cpychecker', 'gcc-python2-plugin'),
                                              ('gcc', 'gcc')]:
                # FIXME: there really ought to be just one of each:
                self.versions[generator_name] = ', '.join(mockcfg.get_nvras(rpmname))

        def visit_generator(self, generator):
            if generator.name in self.versions:
                generator.version = self.versions[generator.name]

    generator_versions_fixer = FixupGeneratorVersions()

    builddir = os.path.join(mockcfg.get_chroot(), 'builddir')
    for xmlpath in glob.glob(os.path.join(builddir, '*.xml')):
        print(xmlpath)

        # Copy out all relevant sources from buildroot, hashing as we go:
        class SourceExtractor(Visitor):
            def visit_file(self, file_):
                print(file_)
                # Convert the abspath (which is relative to the top of
                # the chroot) to the full path as we see it:
                # e.g. from '/builddir/build/BUILD/python-ethtool-0.7/python-ethtool/ethtool.c')
                # to '/var/lib/mock/fedora-17-x86_64/root/builddir/build/BUILD/python-ethtool-0.7/python-ethtool/ethtool.c'
                srcpath = mockcfg.get_path(file_.abspath)
                with open(srcpath) as f:
                    # FIXME: harcdoded hash
                    hexdigest = hashlib.sha1(f.read()).hexdigest()
                dstpath = os.path.join(sourcesdir, hexdigest)
                shutil.copy(srcpath, dstpath)
                file_.hash_ = Hash(alg='sha1', hexdigest=hexdigest)

        with open(xmlpath) as f:
            a = Analysis.from_xml(f)
        a.accept(SourceExtractor())

        # Update SUT information:
        basename = os.path.basename(srpm)
        m = re.match('(.+)-(.+)-(.+)', basename)
        name, version, release = m.groups()
        a.metadata.sut = SourceRpm(name=name,
                                   version=version,
                                   release=release,
                                   buildarch=buildarch)

        # Update generator versions:
        a.accept(generator_versions_fixer)

        # Write postprocessed report to mock's "static-analysis/reports" dir:
        xmlstr = a.to_xml_str()
        hexdigest = hashlib.sha1(xmlstr).hexdigest()
        filename = os.path.join(reportsdir, '%s.xml' % hexdigest)
        with open(filename, 'w') as f:
            f.write(xmlstr)

def parse_args(argv):
    parser = argparse.ArgumentParser(description='Invoke mock whilst injecting static analyzers.')
    parser.add_argument('chroot', metavar='CHROOT', type=str,
                        help='which mock chroot to use')
    parser.add_argument('srpm', metavar='SRPM', type=str,
                        help='which SRPM to rebuild')
    args = parser.parse_args()
    return args

def main(argv):
    args = parse_args(argv)
    mockcfg = MockConfig(args.chroot)
    setup_chroot(mockcfg, args.srpm)
    rebuild_srpm(mockcfg, args.srpm)
    extract_results_from_chroot(mockcfg,
                                args.srpm,
                                buildarch='x86_64') # FIXME

if __name__ == '__main__':
    main(sys.argv)
