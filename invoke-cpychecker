#!/usr/bin/env python
#   Copyright 2013 David Malcolm <dmalcolm@redhat.com>
#   Copyright 2013 Red Hat, Inc.
#
#   This is free software: you can redistribute it and/or modify it
#   under the terms of the GNU General Public License as published by
#   the Free Software Foundation, either version 3 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful, but
#   WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
#   General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program.  If not, see
#   <http://www.gnu.org/licenses/>.

from subprocess import Popen, PIPE, STDOUT
import sys
import tempfile

from fakegcc import write_analysis_as_xml, write_streams, Timer, \
    make_file, make_stats, log, get_real_executable
from firehose.parsers.cppcheck import parse_file
from gccinvocation import GccInvocation

def invoke_cpychecker(gccinv, dstxmlpath):
    from firehose.model import Analysis

    log('invoke_cpychecker for %s' % gccinv)
    for sourcefile in gccinv.sources:
        if sourcefile.endswith('.c'): # FIXME: other extensions?
            # invoke the plugin, but for robustness, do it in an entirely separate gcc invocation
            # strip away -o; add -S or -c?
            # or set -o to a dummy location?
            # latter seems more robust
            #gccinv = gccinv.restrict_source(sourcefile)

            assert len(gccinv.sources) == 1 # for now

            argv = gccinv.argv[:]

            outputxmlpath = '%s.firehose.xml' % sourcefile

            # We would use the regular keyword argument syntax:
            #   outputxmlpath='foo'
            # but unfortunately gcc's option parser seems to not be able to cope with '='
            # within an option's value.  So we do it using dictionary syntax instead:
            pycmd = ('from libcpychecker import main, Options; '
                     'main(Options(**{"outputxmlpath":"%s", '
                     '"verify_refcounting": True, '
                     '"maxtrans": 1024, '
                     '}))' % outputxmlpath)
            argv += ['-fplugin=python2',
                     '-fplugin-arg-python2-command=%s' % pycmd]

            args = [get_real_executable(argv)] + argv[1:]
            if 1:
                log(' '.join(args))
            p = Popen(args, stdout=PIPE, stderr=PIPE)
            try:
                t = Timer()
                out, err = p.communicate()
                write_streams('cpychecker', out, err)
            except KeyboardInterrupt:
                pass

            with open(outputxmlpath) as f:
                analysis = Analysis.from_xml(f)
            analysis.metadata.file_ = make_file(sourcefile)
            analysis.metadata.stats = make_stats(t)
            analysis.set_custom_field('cpychecker-invocation',
                                      ' '.join(args))
            analysis.set_custom_field('stdout', out)
            analysis.set_custom_field('stderr', err)
            write_analysis_as_xml(analysis, dstxmlpath)

if __name__ == '__main__':
    dstxmlpath =  sys.argv[1]
    gccinv = GccInvocation(sys.argv[2:])
    invoke_cpychecker(gccinv, dstxmlpath)
