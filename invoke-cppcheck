#!/usr/bin/env python
#   Copyright 2013 David Malcolm <dmalcolm@redhat.com>
#   Copyright 2013 Red Hat, Inc.
#
#   This is free software: you can redistribute it and/or modify it
#   under the terms of the GNU General Public License as published by
#   the Free Software Foundation, either version 3 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful, but
#   WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
#   General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program.  If not, see
#   <http://www.gnu.org/licenses/>.

from subprocess import Popen, PIPE, STDOUT
import sys
import tempfile

from fakegcc import write_analysis_as_xml, write_streams, Timer, \
    make_file, make_stats, log
from firehose.parsers.cppcheck import parse_file
from gccinvocation import GccInvocation

def invoke_cppcheck(gccinv, dstxmlpath):

    log('invoke_cppcheck(%s, %r)' % (gccinv, dstxmlpath))

    for sourcefile in gccinv.sources:
        if sourcefile.endswith('.c'): # FIXME: other extensions?
            # Invoke cppcheck, capturing output in its XML format
            t = Timer()
            p = Popen(['cppcheck',
                       '--xml', '--xml-version=2',
                       sourcefile],
                      stdout=PIPE, stderr=PIPE)
            out, err = p.communicate()
            write_streams('cppcheck', out, err)

            # (there doesn't seem to be a way to have cppcheck directly
            # save its XML output to a given location)

            with tempfile.NamedTemporaryFile() as outfile:
                outfile.write(err)
                outfile.flush()

                with open(outfile.name) as infile:
                    # Parse stderr into firehose XML format and save:
                    analysis = parse_file(infile,
                                          file_=make_file(sourcefile),
                                          stats=make_stats(t))
                    write_analysis_as_xml(analysis, dstxmlpath)

if __name__ == '__main__':
    dstxmlpath =  sys.argv[1]
    gccinv = GccInvocation(sys.argv[2:])
    invoke_cppcheck(gccinv, dstxmlpath)
